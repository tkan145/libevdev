// mkpost.go - Process the output of cgo  -godefs to modify the generated types.
// mkpost is run after cgo -godefs; see README.md

//go:build ignore
// +build ignore

package main

import (
	"bytes"
	"fmt"
	"go/format"
	"io/ioutil"
	"os"
	"regexp"
)

func main() {
	goos := os.Getenv("GOOS")
	goarch := os.Getenv("GOARCH_TARGET")
	if goarch == "" {
		goarch = os.Getenv("GOARCH")
	}

	b, err := ioutil.ReadAll(os.Stdin)
	if err != nil {
		fmt.Fprintf(os.Stderr, "%v", err)
		os.Exit(1)
	}

	// Remove the first line of warning from cgo
	b = b[bytes.IndexByte(b, '\n')+1:]
	replacement := fmt.Sprintf(`$1 | go run mkpost.go
    // Code generated by the command above; see README.md. DO NOT EDIT.

    //go:build %s && %s
    // +build %s,%s
    `, goarch, goos, goarch, goos)
	cgoCommandRegex := regexp.MustCompile(`(cgo -godefs .*)`)
	b = cgoCommandRegex.ReplaceAll(b, []byte(replacement))

	// replace C struct timeval with unix.Timeval
	timevalRegex := regexp.MustCompile(`_Ctype_struct_timeval`)
	b = timevalRegex.ReplaceAll(b, []byte("unix.Timeval"))

	// import unix package
	packageRegex := regexp.MustCompile(`package libevdev`)
	b = packageRegex.ReplaceAll(b, []byte(`package libevdev

	import "golang.org/x/sys/unix"`))

	// gofmt
	b, err = format.Source(b)
	if err != nil {
		fmt.Fprintf(os.Stderr, "%v", err)
		os.Exit(1)
	}

	os.Stdout.Write(b)
}
